{"name":"Pygraph redis","tagline":"Simple python library to manipulate directed graphs in redis","body":"pygraph\\_redis\r\n==============\r\n\r\nSimple python library to manipulate directed graphs in redis\r\n\r\nLicense\r\n=======\r\n\r\npygraph\\_redis is released under the MIT Public License\r\n\r\nDescription\r\n===========\r\n\r\npygraph\\_redis is a simple library to manipulate directed graphs inside a redis database.\r\n\r\nIn this library, a graph is a bunch of nodes, each node knows its predecessors \r\nand its successors. A node can store some attributs (strings or sets of strings).\r\n\r\nInstallation\r\n============\r\n\r\nto install:\r\n\r\n```bash\r\npython setup.py install\r\n```\r\n\r\nHow to use\r\n==========\r\n\r\nFirst you need a redis database, it's up to you to install it.\r\n\r\nThe library itself is quite simple:\r\n\r\nCheat Sheet\r\n-----------\r\n\r\n```python\r\n#              initialization\r\n#       arg1      |    arg2    |     arg3\r\n#--------------------------------------------\r\n# redis connexion | graph_name |    logger\r\n#    redis obj    |  unicode   |  logger obj \r\n\r\nmygraph1 = Directed_graph(r_server, u'mygraph1', logger)\r\n```\r\n\r\n```python\r\n#                    create or add elements to a node\r\n#    arg1   |     arg2     |     arg3     |             arg4\r\n#---------------------------------------------------------------------------\r\n# node name |  successors  | predecessors |           attributs\r\n#  unicode  | unicode list | unicode list |      dictionnary of unicode \r\n#           |              |              | or set of unicode (key: unicode)\r\n\r\nmygraph1.write_on_node(u'm1', [u's2'], [u'p1'], {u'at3': set([u'69']), u'at2': u'42'}\r\n```\r\n\r\n```python\r\n#             delete elements from a node\r\n#    arg1   |     arg2     |     arg3     |      arg4\r\n#----------------------------------------------------------\r\n# node name |  successors  | predecessors | attributs names\r\n#  unicode  | unicode list | unicode list | list of unicode \r\n\r\nmygraph1.write_off_node(u'm1', [u's2'], [u'p1'], [u'attr3', u'attr2']\r\n```\r\n\r\n```python\r\n# delete a node\r\n#     arg1 \r\n#--------------\r\n#  node name \r\n#   unicode   \r\n\r\nmygraph1.remove_node(u'm1')\r\n```\r\n\r\nInitialization\r\n--------------\r\n\r\nCreate an instance of \"Directed\\_graph\":\r\n\r\n```python\r\n#importing directed_graph\r\nfrom pygraph_redis.directed_graph import Directed_graph\r\nimport redis\r\n\r\n#creating a basic logger\r\nimport logging\r\nlogging.basicConfig(format = u'%(message)s')\r\nlogger = logging.getLogger(u'redis')\r\nlogger.parent.setLevel(logging.DEBUG)\r\n\r\n#creating the redis connexion\r\nr_server = redis.Redis(\"localhost\")\r\n\r\n#creating the graph object\r\nmygraph1 = Directed_graph(r_server, u'mygraph1', logger)\r\n\r\n#creating the graph object with a different separator\r\nmygraph2 = Directed_graph(r_server, u'mygraph2', logger, separator = u'my_custom_sep')\r\n\r\n#creating the graph object with a \"root\" (improper name, I know)\r\nmygraph2 = Directed_graph(r_server, u'mygraph2', logger, has_root = True)\r\n#\"has\\_root = True\" ensures that every node has a predecessor\r\n#if enabled, a node has at least root as a predecessor, \r\n#but if it has any other predecessor it doesn't have root as predecessor\r\n\r\n```\r\n\r\nNode manipulation\r\n-----------------\r\n\r\nNode creation:\r\n\r\n```python\r\n#add node 'm1' to 'mygraph1' with:\r\n#successors: 's1' and 's2'\r\n#predecessors: 'p1' and 'p2'\r\n#attributs:\r\n#   * 'attr1': set([u'51',u'69'])\r\n#   * 'attr2': '42'    \r\n\r\nmygraph1.write_on_node(u'm1',\r\n    [u's1', u's2'],\r\n    [u'p1', u'p2'],\r\n    {u'attr1': set([u'51', u'69']), u'attr2': u'42'}\r\n)\r\n```\r\n\r\nNode edition:\r\n\r\n```python\r\n#add new elements or edit existing elements of a node\r\n#it's exactly the same function as before\r\nmygraph1.write_on_node(u'm1', \r\n    [u's4'], \r\n    [], \r\n    {u'attr3': set([u'16', u'32', u'64']), u'attr2': u'5150'}\r\n)\r\n\r\n#remove some elements of a node (successors, predecessors, attributs)\r\nmygraph1.write_off_node(u\"m1\", [u\"s1\"], [u\"p2\"],[u'attr2'])\r\n\r\n#completely delete a node\r\nmygraph1.remove_node(u'm1')\r\n```\r\n\r\nNode attributs manipulation\r\n---------------------------\r\n\r\nTo manipulate the attributs of a node:\r\n\r\n```python\r\n#create the node 'm2'\r\nmygraph1.write_on_node(u'm2',\r\n    [u's1', u's2'],\r\n    [u'p1', u'p2'],\r\n    {u'attr1': set([u'51', u'69']), u'attr2': u'42'}\r\n)\r\n\r\n#get the set of attribut names\r\nset_of_attributs = mygraph1.get_attributs_list(u'm2')\r\nprint set_of_attributs\r\n\r\n#get a specific attribut\r\nattr2 = mygraph1.get_attribut(u'm2', u'attr2')\r\nprint attr2\r\n\r\n```\r\n\r\nGraph navigation\r\n----------------\r\n\r\nTo navigate inside the graph, you have two functions:\r\n\r\n```python\r\n#get the predecessors of 'm2'\r\npredecessors = mygraph1.get_predecessors(u'm2')\r\nprint predecessors\r\n\r\n#get the successors of 'm2'\r\nsuccessors = mygraph1.get_successors(u'm2')\r\n```\r\n\r\nif you have the `has_root` flag enable:\r\n\r\n```python\r\n#get the \"root\" name\r\nroot = mygraph1.get_root_name()\r\n\r\nprint root\r\n\r\n#get the successors of 'root'\r\nsuccessors = mygraph1.get_successors(root)\r\nprint successors\r\n\r\n```\r\n\r\nAbout the redis keys\r\n--------------------\r\n\r\nRedis key format:\r\n```\r\n  <graph name><sep><node_name><sep><variable_name>[<sep><other>]*\r\n  \r\n  <graph name>: name of the graph\r\n  <sep>: the key fields separator \r\n       (this string should not be in node_name or variable_name,\r\n        otherwise, there is a redis key collision possibility)\r\n  <node_name>: name of the node\r\n  <variable_name>: name of the variable\r\n  [<sep><other>]: optional extension\r\n```\r\n\r\nTo avoid key collision, you must carefully choose the key separator,\r\nit must not be included in any node name or node attribut name (possible redis key collision).\r\n\r\nAbout the logs\r\n--------------\r\n\r\nThis library provides a lot of logs, most of them are debug, except possible redis key collision which is warning.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}